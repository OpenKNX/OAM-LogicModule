;PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
; default_envs = build
libdeps_dir = /tmp/libdeps

[env]
framework = arduino
build_flags = 
  ; optimize knx stack
  -D SMALL_GROUPOBJECT
  -D USE_BINSEARCH
  -D LOGICAPP
  -D LOGICMODULE
  -D MASK_VERSION=0x07B0
  ; use flash directly
  ;flash start at 1.5MiB
  -D KNX_FLASH_SIZE=0x8000 ; be careful, has to be large enough for ETS data and data stored by IFlashUserData
  -D KNX_FLASH_OFFSET=0x180000 
  ; use EEPROM emulation
  ;-D DEBUG_TIMING
  ;-D LOGIC_TRACE
  -Wno-unknown-pragmas 
  -Wno-switch
  ; debug timing in knx stack
monitor_speed = 115200
lib_ldf_mode = deep+
; lib_deps =
;   khoih-prog/TimerInterrupt_Generic @ 1.13.0
; lib_extra_dirs = 
;   ${PROJECT_DIR}\..
debug_tool = jlink
debug_build_flags = -O0 -ggdb3
debug_extra_cmds = 
  set output-radix 16

[RP2040]
; platform = raspberrypi
; platform = https://github.com/maxgerhardt/platform-raspberrypi.git#9f8c10e
platform = https://github.com/maxgerhardt/platform-raspberrypi.git
board = pico
board_build.core = earlephilhower
platform_packages = framework-arduinopico @ https://github.com/earlephilhower/arduino-pico/releases/download/2.7.3/rp2040-2.7.3.zip
; platform_packages = 
    ; maxgerhardt/toolchain-pico@https://github.com/earlephilhower/pico-quick-toolchain/releases/download/1.5.0-a/x86_64-w64-mingw32.arm-none-eabi-5007782.221223.zip
    ; framework-arduinopico@https://github.com/earlephilhower/arduino-pico.git#2.7.3

; configure filesystem size. Default 0 Mbyte.
; board_build.filesystem_size = 1M
; inject core package.. not yet registered with PlatformIO
; registry, so pull working version directly from git / download page.
; note that download link for toolchain is specific for OS. see https://github.com/earlephilhower/pico-quick-toolchain/releases.
; platform_packages = 
;     mumpf/framework-arduinopico@https://github.com/mumpf/arduino-pico.git
;     maxgerhardt/toolchain-pico@https://github.com/earlephilhower/pico-quick-toolchain/releases/download/1.3.2-a/x86_64-w64-mingw32.arm-none-eabi-9d55fd1.220202.zip

    ; maxgerhardt/framework-arduinopico@file://c:\users\d019748\platformio\arduino-pico
build_flags =
  ${env.build_flags}
  -D SERIAL_DEBUG=Serial
  ; -D USE_RP2040_EEPROM_EMULATION
  ; -D USE_RP2040_LARGE_EEPROM_EMULATION
  -D PIO_FRAMEWORK_ARDUINO_ENABLE_RTTI
  -D LWIP_DONT_PROVIDE_BYTEORDER_FUNCTIONS
  -O0
build_unflags = -Os
  
; lib_deps = 
;   adafruit/Adafruit SleepyDog Library @ ^1.4.0
; ;   Wire
; ;   SPI

[SAMD]
platform = atmelsam
board = zeroUSB
build_flags = 
  ${env.build_flags}
  -D SERIAL_DEBUG=SerialUSB
  ; use EEPROM emulation
  ; -D USE_SAMD_EEPROM_EMULATION
  ; -D CRYSTALLESS
  ; -D WATCHDOG
lib_deps = 
  ; ${env.lib_deps}
  adafruit/Adafruit SleepyDog Library @ 1.4.0
;   Wire
;   SPI

[RP2040_develop]
build_flags =
  -D DEBUG_DELAY=10000
  ; -D BOARD_MASIFI_PICO
  ; -D BOARD_MASIFI_HFPM_DEVEL2
  ; -D BOARD_MASIFI_V40
  -D BOARD_MASIFI_SENSOR_BREAKOUT
  
[SAMD_develop]
build_flags =
  -D DEBUG_DELAY=10000
  -D BOARD_MASIFI_V31



[env:build_RP2040]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  ${RP2040_develop.build_flags}

[env:build_SAMD]
extends = SAMD
build_flags =
  ${SAMD.build_flags}
  ${SAMD_develop.build_flags}



[env:upload_USB_RP2040]
extends = RP2040
build_flags = 
  ${RP2040.build_flags} 
  ${RP2040_develop.build_flags}
upload_protocol = picotool

[env:upload_USB_SAMD]
extends = SAMD
build_flags = 
  ${SAMD.build_flags} 
  ${SAMD_develop.build_flags}
upload_protocol = sam-ba

[env:upload_JLINK_RP2040]
extends = RP2040
build_flags = 
  ${RP2040.build_flags} 
  ${RP2040_develop.build_flags}
upload_protocol = jlink

[env:upload_JLINK_SAMD]
extends = SAMD
build_flags = 
  ${SAMD.build_flags} 
  ${SAMD_develop.build_flags}
upload_protocol = jlink


#### Release Environments
[env:release_Sensormodul_Breakout_RP2040]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_SENSOR_BREAKOUT

[env:release_Sensormodul_v31_SAMD]
extends = SAMD
build_flags =
  ${SAMD.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_V31

[env:release_Sensormodul_v30_SAMD]
extends = SAMD
build_flags =
  ${SAMD.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_V3

[env:release_Sensormodul_v40_RP2040]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_V40

[env:release_PiPico_BCU_Connector]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_SIRSYDOM_PIPICO_BCU_CONNECTOR

[env:release_1TE_RP2040_SmartMF]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_SMARTMF_1TE_RP2040

[env:release_OpenKNX_REG1_Base]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_OPENKNX_REG1_BASE

### This is an example for enduser compiled environment
[env:enduser]
extends = SAMD
;extends = RP2040
upload_protocol = sam-ba
;upload_protocol = picotool
build_flags =
  ${SAMD.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_V2
;  -D BOARD_MASIFI_HFPM_DEVEL


